generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TitelPosition {
  VOR
  NACH
}

model email {
  email_id         Int                @id @default(autoincrement()) @db.UnsignedInt
  email_adresse    String?            @unique(map: "unique_email_adresse") @db.VarChar(45)
  person_hat_email person_hat_email[]
}

model geschlecht {
  geschlecht_id Int      @id @default(autoincrement()) @db.UnsignedInt
  geschlecht    String   @unique(map: "unique_geschlecht") @db.VarChar(1)
  person        person[]
}

model mitgliedschaftszeitraum {
  mitgliedschaftszeitraum_id Int       @id @default(autoincrement()) @db.UnsignedInt
  von                        DateTime? @db.Date
  bis                        DateTime? @db.Date
  person_id                  Int       @db.UnsignedInt
  person                     person    @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_mitgliedschaftszeitraum_person")

  @@index([person_id], map: "idx_person")
}

model person {
  person_id                   Int       @id @default(autoincrement()) @db.UnsignedInt
  vorname                     String    @db.VarChar(45)
  nachname                    String    @db.VarChar(45)
  geburtsdatum                DateTime? @db.Date
  mitgliedsnummer             Int?      @unique(map: "unique_mitgliedsnummer") @db.UnsignedInt
  schuetzenpassnummer         Int?      @unique(map: "unique_schuetzenpassnummer") @db.UnsignedInt
  strasse                     String?   @db.VarChar(45)
  ort                         String?   @db.VarChar(45)
  plz                         String?   @db.VarChar(45)
  geschlecht_id               Int       @db.UnsignedInt
  ist_landesverband_gemeldet  Int       @db.UnsignedTinyInt
  hat_schluessel_suessenbrunn Int       @db.UnsignedTinyInt
  notiz                       String?   @db.Text
  username                    String    @unique @db.VarChar(45)

  mitgliedschaftszeitraum  mitgliedschaftszeitraum[]
  geschlecht               geschlecht                 @relation(fields: [geschlecht_id], references: [geschlecht_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_geschlecht")
  person_hat_email         person_hat_email[]
  person_hat_telefonnummer person_hat_telefonnummer[]
  person_hat_titel         person_hat_titel[]
  person_hat_rolle         person_hat_rolle[]
  person_hat_status        person_hat_status[]

  @@index([geschlecht_id], map: "idx_geschlecht")
}

model person_hat_email {
  person_id Int    @db.UnsignedInt
  email_id  Int    @db.UnsignedInt
  email     email  @relation(fields: [email_id], references: [email_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_email_person")
  person    person @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person_email")

  @@id([person_id, email_id])
  @@index([email_id], map: "idx_email")
  @@index([person_id], map: "idx_person_email")
}

model person_hat_telefonnummer {
  person_id        Int           @db.UnsignedInt
  telefonnummer_id Int           @db.UnsignedInt
  person           person        @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person_hat_telefonnummer_person")
  telefonnummer    telefonnummer @relation(fields: [telefonnummer_id], references: [telefonnummer_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_hat_telefonnummer_telefonnummer")

  @@id([person_id, telefonnummer_id])
  @@index([person_id], map: "idx_person_telefonnummer")
  @@index([telefonnummer_id], map: "idx_telefonnummer")
}

model person_hat_titel {
  person_id   Int    @db.UnsignedInt
  titel_id    Int    @db.UnsignedInt
  reihenfolge Int    @db.UnsignedInt
  person      person @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person_hat_titel_person")
  titel       titel  @relation(fields: [titel_id], references: [titel_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_hat_titel_titel")

  @@id([person_id, titel_id])
  @@index([person_id], map: "idx_person_titel")
  @@index([titel_id], map: "idx_titel")
}

model person_hat_rolle {
  person_id Int    @db.UnsignedInt
  rolle_id  Int    @db.UnsignedInt
  person    person @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person_hat_rolle_person")
  rolle     rolle  @relation(fields: [rolle_id], references: [rolle_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_hat_rolle_rolle")

  @@id([person_id, rolle_id])
  @@index([person_id], map: "idx_person_rolle")
  @@index([rolle_id], map: "idx_rolle_person")
}

model person_hat_status {
  person_id Int    @db.UnsignedInt
  status_id Int    @db.UnsignedInt
  person    person @relation(fields: [person_id], references: [person_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_person_hat_status_person")
  status    status @relation(fields: [status_id], references: [status_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_person_hat_status_status")

  @@id([person_id, status_id])
  @@index([person_id], map: "idx_person_status")
  @@index([status_id], map: "idx_status_person")
}

model rolle {
  rolle_id          Int                @id @default(autoincrement()) @db.UnsignedInt
  rolle_bezeichnung String             @unique(map: "unique_rolle_bezeichnung") @db.VarChar(45)
  person_hat_rolle  person_hat_rolle[]
}

model status {
  status_id          Int                 @id @default(autoincrement()) @db.UnsignedInt
  status_bezeichnung String              @unique(map: "unique_status_bezeichnung") @db.VarChar(45)
  person_hat_status  person_hat_status[]
}

model telefonnummer {
  telefonnummer_id         Int                        @id @default(autoincrement()) @db.UnsignedInt
  telefonnummer            String?                    @db.VarChar(45)
  telefonnummer_typ_id     Int                        @db.UnsignedInt
  person_hat_telefonnummer person_hat_telefonnummer[]
  telefonnummer_typ        telefonnummer_typ          @relation(fields: [telefonnummer_typ_id], references: [telefonnummer_typ_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_telefonnummer_typ")

  @@unique([telefonnummer, telefonnummer_typ_id], map: "unique_telefonnummer_typ")
  @@index([telefonnummer_typ_id], map: "idx_telefonnummer_typ")
}

model telefonnummer_typ {
  telefonnummer_typ_id Int             @id @default(autoincrement()) @db.UnsignedInt
  telefonnummer_typ    String          @unique(map: "unique_telefonnummer_typ") @db.VarChar(45)
  telefonnummer        telefonnummer[]
}

model titel {
  titel_id         Int                @id @default(autoincrement()) @db.UnsignedInt
  titel            String             @unique(map: "titel_UNIQUE") @db.VarChar(45)
  position         TitelPosition      @default(VOR)
  person_hat_titel person_hat_titel[]
}
